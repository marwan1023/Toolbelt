package seniorproject;

/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

import java.awt.Component;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.Frame;
import java.awt.MenuShortcut;
import java.awt.Point;
import java.io.File;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

public class SetFiles extends Frame
{
   
    private static final long serialVersionUID = 1L;
    
 // Used for addNotify check.
    boolean fComponentsAdjusted = false;
    
    //{{DECLARE_CONTROLS
    FileDialog openFileDialog1 = new FileDialog(this);
    JButton FinishButton = new JButton();
    JButton CancelButton = new JButton();
    JTextField AddFileTextBox = new JTextField();
    //com.symantec.itools.swing.borders.BevelBorder bevelBorder1 = new com.symantec.itools.swing.borders.BevelBorder();
    JLabel JLabel1 = new JLabel();
    JLabel JLabel2 = new JLabel();
    JLabel JLabel5 = new JLabel();
    JTextField FinalIPbox = new JTextField();
    JLabel JLabel4 = new JLabel();
    JTextField DirectoryTextBox = new JTextField();
    JLabel JLabel7 = new JLabel();
    JLabel JLabel8 = new JLabel();
    java.awt.List FileTypeList = new java.awt.List(4);
    JLabel ExtensionLabel = new JLabel();
    JLabel ErrorLabel = new JLabel();
    JButton AddButton = new JButton();
    ButtonGroup JButtonGroupPanel1 = new ButtonGroup();
    JRadioButton JRadioButton1 = new JRadioButton();
    JRadioButton JRadioButton3 = new JRadioButton();
    JRadioButton JRadioButton2 = new JRadioButton();
    JRadioButton JRadioButton4 = new JRadioButton();
    JLabel JLabel3 = new JLabel();
    //}}
    
    //{{DECLARE_MENUS
    java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
    java.awt.Menu menu1 = new java.awt.Menu();
    java.awt.MenuItem newMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem openMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem saveMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem saveAsMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem separatorMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem exitMenuItem = new java.awt.MenuItem();
    java.awt.Menu menu2 = new java.awt.Menu();
    java.awt.MenuItem cutMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem copyMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem pasteMenuItem = new java.awt.MenuItem();
    java.awt.Menu menu3 = new java.awt.Menu();
    java.awt.MenuItem aboutMenuItem = new java.awt.MenuItem();
    //}}
    
    

    //public String[] SelectedFileTypes = new String[50];
	public SetFiles()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(new java.awt.Color(253,236,219));
		setSize(645,499);
		setVisible(false);
		openFileDialog1.setMode(FileDialog.LOAD);
		openFileDialog1.setTitle("Open");
		//$$ openFileDialog1.move(24,312);
		FinishButton.setText("Submit");
		//FinishButton.setBorder(bevelBorder1);
		FinishButton.setToolTipText("Continue");
		add(FinishButton);
		FinishButton.setBackground(new java.awt.Color(0,0,128));
		//FinishButton.setForeground(new java.awt.Color(253,236,219));
		FinishButton.setBounds(288,396,120,28);
		FinishButton.setActionCommand("Next");
		add(AddFileTextBox);
		AddFileTextBox.setBounds(12,396,96,28);
		//$$ bevelBorder1.move(0,346);
		JLabel1.setHorizontalTextPosition(SwingConstants.CENTER);
		JLabel1.setHorizontalAlignment(SwingConstants.CENTER);
		JLabel1.setText("Stable Storage Registration ");
		JLabel1.setOpaque(true);
		//JLabel1.setBorder(bevelBorder1);
		add(JLabel1);
		//JLabel1.setBackground(new java.awt.Color(0,0,128));
		//JLabel1.setForeground(java.awt.Color.lightGray);
		JLabel1.setFont(new Font("Serif", Font.BOLD|Font.ITALIC, 22));
		JLabel1.setBounds(12,12,612,36);
		JLabel2.setText("If your file type is not listed, add it here. ");
		add(JLabel2);
		//JLabel2.setForeground(new java.awt.Color(0,0,128));
		JLabel2.setBounds(12,372,276,16);
		JLabel5.setText("IP address of the Final Destination Machine");
		add(JLabel5);
		//JLabel5.setForeground(new java.awt.Color(0,0,128));
		JLabel5.setBounds(288,192,300,28);
		add(FinalIPbox);
		FinalIPbox.setBounds(288,216,288,24);
		JLabel4.setHorizontalTextPosition(SwingConstants.CENTER);
		JLabel4.setHorizontalAlignment(SwingConstants.CENTER);
		JLabel4.setText("Step 1");
		JLabel4.setOpaque(true);
		//JLabel4.setBorder(bevelBorder1);
		add(JLabel4);
		JLabel4.setBackground(new java.awt.Color(253,236,219));
		//JLabel4.setForeground(new java.awt.Color(0,0,128));
		JLabel4.setFont(new Font("Serif", Font.BOLD|Font.ITALIC, 13));
		JLabel4.setBounds(12,72,60,24);
		add(DirectoryTextBox);
		DirectoryTextBox.setBounds(288,132,288,24);
		JLabel7.setText("Directory you wish to transfer");
		add(JLabel7);
		//JLabel7.setForeground(new java.awt.Color(0,0,128));
		JLabel7.setBounds(288,108,264,16);
		JLabel8.setText("For Example: C://My Documents/Stable Storage");
		add(JLabel8);
		//JLabel8.setForeground(new java.awt.Color(0,0,128));
		JLabel8.setFont(new Font("Serif", Font.BOLD|Font.ITALIC, 12));
		JLabel8.setBounds(288,168,264,12);
		FileTypeList.add("pic");
		FileTypeList.add("wav");
		FileTypeList.add("doc");
		FileTypeList.add("tif");
		FileTypeList.add("tiff");
		FileTypeList.add("mov");
		FileTypeList.add("gif");
		FileTypeList.add("zip");
		FileTypeList.add("java");
		FileTypeList.add("wav");
		FileTypeList.add("mp3");
		FileTypeList.add("c");
		FileTypeList.add("wpd");
		FileTypeList.add("exe");
		FileTypeList.add("ini");
		FileTypeList.add("bat");
		FileTypeList.add("zip");
		FileTypeList.add("java");
		FileTypeList.add("obj");
		FileTypeList.add("kdb");
		FileTypeList.add("sit");
		FileTypeList.add("mdn");
		FileTypeList.add("mdz");
		FileTypeList.add("pio");
		FileTypeList.add("css");
		FileTypeList.add("art");
		FileTypeList.add("ani");
		FileTypeList.add("aif");
		FileTypeList.add("rtf");
		FileTypeList.add("aiff");
		FileTypeList.add("ai");
		FileTypeList.add("html");
		FileTypeList.add("htm");
		FileTypeList.add("txt");
		FileTypeList.add("vpj");
		FileTypeList.add("vep");
		FileTypeList.add("tdb");
		FileTypeList.add("sav");
		FileTypeList.add("pdf");
		FileTypeList.setMultipleMode(true);
		add(FileTypeList);
		FileTypeList.setBounds(12,132,180,228);
		ExtensionLabel.setText("Select the File Types to transfer");
		add(ExtensionLabel);
		//ExtensionLabel.setForeground(new java.awt.Color(0,0,128));
		ExtensionLabel.setBounds(12,108,276,16);
		ErrorLabel.setText("Please Correct Areas in Red!");
		add(ErrorLabel);
		//ErrorLabel.setForeground(java.awt.Color.red);
		ErrorLabel.setFont(new Font("Dialog", Font.BOLD, 16));
		ErrorLabel.setBounds(204,60,240,40);
		ErrorLabel.setVisible(false);
		AddButton.setText("Add ");
		AddButton.setActionCommand("jbutton");
		AddButton.setToolTipText("Add file type to list.  Only enter extension, do not enter the \".\".  ");
		add(AddButton);
		AddButton.setBackground(new java.awt.Color(157,185,200));
		//AddButton.setForeground(new java.awt.Color(0,0,128));
		AddButton.setBounds(108,396,108,28);
		//JButtonGroupPanel1.setLayout(new GridLayout(4,1,0,0));
		
		//TODO 
		//add(JButtonGroupPanel1);
		//JButtonGroupPanel1.setBackground(new java.awt.Color(253,235,219));
		//JButtonGroupPanel1.setBounds(288,300,268,84);
		JRadioButton1.setText("30 minutes");
		JButtonGroupPanel1.add(JRadioButton1);
		JRadioButton1.setBounds(0,0,268,21);
		JRadioButton3.setText("1 hour");
		JRadioButton3.setActionCommand("1 hour");
		JButtonGroupPanel1.add(JRadioButton3);
		JRadioButton3.setBounds(0,21,268,21);
		JRadioButton2.setText("12 hours");
		JRadioButton2.setActionCommand("12 hours");
		JButtonGroupPanel1.add(JRadioButton2);
		JRadioButton2.setBounds(0,42,268,21);
		JRadioButton4.setText("24 hours");
		JRadioButton4.setActionCommand("24 hours");
		JButtonGroupPanel1.add(JRadioButton4);
		JRadioButton4.setBounds(0,63,268,21);
		JLabel3.setText("How often would you like to back up your files?");
		//add(JLabel3);
		
		JLabel3.setForeground(new java.awt.Color(0,0,128));
		JLabel3.setBounds(288,264,300,28);
		JRadioButton1.setActionCommand("30 minutes");
		setTitle("JST- Stable Storage Registration");
		//}}
		
		//{{INIT_MENUS
		menu1.setLabel("File");
		menu1.add(newMenuItem);
		newMenuItem.setEnabled(false);
		newMenuItem.setLabel("New");
		newMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_N,false));
		menu1.add(openMenuItem);
		openMenuItem.setLabel("Open...");
		openMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_O,false));
		menu1.add(saveMenuItem);
		saveMenuItem.setEnabled(false);
		saveMenuItem.setLabel("Save");
		saveMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_S,false));
		menu1.add(saveAsMenuItem);
		saveAsMenuItem.setEnabled(false);
		saveAsMenuItem.setLabel("Save As...");
		menu1.add(separatorMenuItem);
		separatorMenuItem.setLabel("-");
		menu1.add(exitMenuItem);
		exitMenuItem.setLabel("Exit");
		mainMenuBar.add(menu1);
		menu2.setLabel("Edit");
		menu2.add(cutMenuItem);
		cutMenuItem.setEnabled(false);
		cutMenuItem.setLabel("Cut");
		cutMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_X,false));
		menu2.add(copyMenuItem);
		copyMenuItem.setEnabled(false);
		copyMenuItem.setLabel("Copy");
		copyMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_C,false));
		menu2.add(pasteMenuItem);
		pasteMenuItem.setEnabled(false);
		pasteMenuItem.setLabel("Paste");
		pasteMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_V,false));
		mainMenuBar.add(menu2);
		menu3.setLabel("Help");
		menu3.add(aboutMenuItem);
		aboutMenuItem.setLabel("About...");
		mainMenuBar.add(menu3);
		//$$ mainMenuBar.move(0,312);
		setMenuBar(mainMenuBar);
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		openMenuItem.addActionListener(lSymAction);
		exitMenuItem.addActionListener(lSymAction);
		aboutMenuItem.addActionListener(lSymAction);
		AddButton.addActionListener(lSymAction);
		FinishButton.addActionListener(lSymAction);
		//}}
	}
	
	public SetFiles(String title)
	{
		this();
		setTitle(title);
	}
	
    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}	
		super.setVisible(b);
	}
	
	static public void main(String args[])
	{
		try
		{
			//Create a new instance of our application's frame, and make it visible.
    		(new SetFiles()).setVisible(true);
		}
		catch (Throwable t)
		{
			System.err.println(t);
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}
	
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();
		
		super.addNotify();
	
		if (fComponentsAdjusted)
			return;
	
		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	
	
	
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == SetFiles.this)
				SetFiles_WindowClosing(event);
		}
	}
	
	void SetFiles_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		SetFiles_WindowClosing_Interaction1(event);
	}


	void SetFiles_WindowClosing_Interaction1(java.awt.event.WindowEvent event)
	{
		try {
			// QuitDialog Create and show as modal
			(new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}

	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == openMenuItem)
				openMenuItem_ActionPerformed(event);
			else if (object == aboutMenuItem)
				aboutMenuItem_ActionPerformed(event);
			else if (object == exitMenuItem)
				exitMenuItem_ActionPerformed(event);
			else if (object == AddButton)
				AddButton_actionPerformed(event);
			else if (object == FinishButton)
				FinishButton_actionPerformed(event);
		}
	}
	
	void openMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openMenuItem_ActionPerformed_Interaction1(event);
	}


	void openMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// OpenFileDialog Create and show as modal
		    int		defMode         = openFileDialog1.getMode();
		    String	defTitle        = openFileDialog1.getTitle();
		    String defDirectory     = openFileDialog1.getDirectory();
		    String defFile          = openFileDialog1.getFile();

		    openFileDialog1 = new java.awt.FileDialog(this, defTitle, defMode);
		    openFileDialog1.setDirectory(defDirectory);
		    openFileDialog1.setFile(defFile);
		    openFileDialog1.setVisible(true);
		} catch (Exception e) {
		    e.printStackTrace();
		}
	}


	void aboutMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutMenuItem_ActionPerformed_Interaction1(event);
	}


	void aboutMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// AboutDialog Create and show as modal
			(new AboutDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}
	
	
	void exitMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitMenuItem_ActionPerformed_Interaction1(event);
	}


	void exitMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// QuitDialog Create and show as modal
		    (new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}


	static class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseEntered(java.awt.event.MouseEvent event)
		{
		}
	}

	static class SymMouseMotion extends java.awt.event.MouseMotionAdapter
	{
		public void mouseDragged(java.awt.event.MouseEvent event)
		{
		}
	}

	static class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
		}
	}

	static class SymPropertyChange implements java.beans.PropertyChangeListener
	{
		public void propertyChange(java.beans.PropertyChangeEvent event)
		{
		}
	}

	void AddButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		AddButton_actionPerformed_Interaction1(event);
	}

	void AddButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// FileTypeList Add a string to the List; AddFileTextBox Get the JTextField's text
			FileTypeList.add(AddFileTextBox.getText());
		} catch (java.lang.Exception e) {
		}
	}

	void FinishButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		FinishButton_actionPerformed_Interaction1(event);
			 
	}

	void FinishButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// FileTypeList Select the specified item; convert class java.lang.String->int
			//FileTypeList.select(java.lang.Integer.parseInt(FileTypeList.getSelectedItem()));
			String[] SelectedFileTypes = FileTypeList.getSelectedItems();
							   
			String Directory = DirectoryTextBox.getText();
			File fobj = new File(Directory);
			if (!fobj.isDirectory())
	            {   ErrorLabel.setVisible(true);
	                DirectoryTextBox.setText(" ");
	            	DirectoryTextBox.setForeground(new java.awt.Color(232,0,0));
	                DirectoryTextBox.setText(Directory + " is not a directory");}
            else 
                {
                    int time = 5*60*1000;
                    if(JRadioButton1.isSelected())
                    { time = 30*60*1000;}
                    else if(JRadioButton2.isSelected())
                    {time = 12*60*60*1000;}
                    else if(JRadioButton3.isSelected())
                   {time = 60*60*1000;}
                    else if(JRadioButton3.isSelected())
                   {time = 24*60*60*1000;}
                     this.setVisible(false);    // Hide the invoking frame
	                this.dispose();  
			        new RegistrationCompleteScreen(this, true).setVisible(true);
                    new FileCheck(SelectedFileTypes, Directory, time);
                
			  
		       
			    }
            
            
		} catch (java.lang.Exception e) {
		}
	}

}

